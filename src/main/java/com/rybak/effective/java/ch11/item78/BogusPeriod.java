package com.rybak.effective.java.ch11.item78;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.text.ParseException;

public class BogusPeriod {
    // Byte stream could not have come from real Period instance!
    //Формат потока байтоп описан в Java Object Serialization Specification
    private static final byte[] serializedForm = new byte[] {
            (byte)0xac, (byte)0xed, 0x00, 0x05, 0x73, 0x72, 0x00,
            0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x79, 0x62, 0x61, 0x6b, 0x2e,
            0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x6a,
            0x61, 0x76, 0x61, 0x2e, 0x63, 0x68, 0x31, 0x31, 0x2e, 0x69, 0x74,
            0x65, 0x6d, 0x37, 0x36, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
            0x7c, 0x24, (byte)0x90, 0x32, 0x6d, 0x23, (byte)0xb6, 0x66, 0x02,
            0x00, 0x02, 0x4c, 0x00, 0x03, 0x65, 0x6e, 0x64, 0x74, 0x00, 0x10,
            0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f,
            0x44, 0x61, 0x74, 0x65, 0x3b, 0x4c, 0x00, 0x05, 0x73, 0x74, 0x61,
            0x72, 0x74, 0x71, 0x00, 0x7e, 0x00, 0x01, 0x78, 0x70, 0x73, 0x72,
            0x00, 0x0e, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x75, 0x74, 0x69, 0x6c,
            0x2e, 0x44, 0x61, 0x74, 0x65, 0x68, 0x6a, (byte)0x81, 0x01, 0x4b,
            0x59, 0x74, 0x19, 0x03, 0x00, 0x00, 0x78, 0x70, 0x77, 0x08, 0x00,
            0x00, 0x01, 0x52, 0x03, 0x1d, (byte)0xe7, 0x70, 0x78, 0x73, 0x71,
            0x00, 0x7e, 0x00, 0x03, 0x77, 0x08, 0x00, 0x00, 0x01, 0x52, 0x03,
            0x1d, (byte)0xe7, 0x70, 0x78};

    private static final byte[] invalidObjectExceptionSerializedForm = new byte[] {
            (byte)0xac, (byte)0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x2b, 0x63,
            0x6f, 0x6d, 0x2e, 0x72, 0x79, 0x62, 0x61, 0x6b, 0x2e, 0x65, 0x66,
            0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x6a, 0x61, 0x76,
            0x61, 0x2e, 0x63, 0x68, 0x31, 0x31, 0x2e, 0x69, 0x74, 0x65, 0x6d,
            0x37, 0x36, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x7c, 0x24,
            (byte)0x90, 0x32, 0x6d, 0x23, (byte)0xb6, 0x66, 0x02, 0x00, 0x02,
            0x4c, 0x00, 0x03, 0x65, 0x6e, 0x64, 0x74, 0x00, 0x10, 0x4c, 0x6a,
            0x61, 0x76, 0x61, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x44, 0x61,
            0x74, 0x65, 0x3b, 0x4c, 0x00, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
            0x71, 0x00, 0x7e, 0x00, 0x01, 0x78, 0x70, 0x73, 0x72, 0x00, 0x0e,
            0x6a, 0x61, 0x76, 0x61, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x44,
            0x61, 0x74, 0x65, 0x68, 0x6a, (byte)0x81, 0x01, 0x4b, 0x59, 0x74,
            0x19, 0x03, 0x00, 0x00, 0x78, 0x70, 0x77, 0x08, 0x00, 0x00, 0x00,
            0x5c, (byte)0xea, 0x42, 0x3a, 0x00, 0x78, 0x73, 0x71, 0x00, 0x7e,
            0x00, 0x03, 0x77, 0x08, 0x00, 0x00, 0x01, 0x52, 0x03, 0x70, (byte)0xaa, 0x54, 0x78};


    public static void main(String[] args) throws IOException, ParseException {
        Period p = (Period) deserialize(serializedForm);
        System.out.println(p);

        //Serialization
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        String dateInString = "1982-08-25";
//        Date date = sdf.parse(dateInString);
//
//        Period periodSer = new Period(new Date(), date);
//        ByteArrayOutputStream bos = new ByteArrayOutputStream();
//        ObjectOutputStream out = new ObjectOutputStream(bos);
//        out.writeObject(periodSer);
//
//        System.out.println(getHex(bos.toByteArray()));

    }


    // Returns the object with the specified serialized form
    private static Object deserialize(byte[] sf) {
        try {
            InputStream is = new ByteArrayInputStream(sf);
            ObjectInputStream ois = new ObjectInputStream(is);
            return ois.readObject();
        } catch (Exception e) {
            throw new IllegalArgumentException(e);
        }
    }


    static final String HEXES = "0123456789abcdef";

    public static String getHex( byte [] raw ) {
        if ( raw == null )
        {
            return null;
        }

        final StringBuilder hex = new StringBuilder( 2 * raw.length );
        for ( final byte b : raw )
        {
            hex.append("0x");
            hex.append(HEXES.charAt((b & 0xF0) >> 4))
                    .append(HEXES.charAt((b & 0x0F)));

            hex.append(", ");
        }
        return hex.toString();
    }
}