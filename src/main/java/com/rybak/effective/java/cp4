Item 13 Сводите к минимуму доступность классов и членов
     
     Сокрытие информации - позволяет разделить модули , позволяет разрабатывать , тестировать , следовать по отдельности.
     Нужно сделать каждый класс и его член максимально не доступным.

Item 14  В открытых классах используйте методы доступа, а не открытые поля

    Открытые поля в классе могут быть только не изменяемые public static final .
    Иначе вы не можете использовать какие либо инвариантов. Не возможно поменять структуру классов не изменив его API. Не возможно принимать дополнительные действие когда меняете это поле.

    Однако если класс доступен в пределах пакета или является закрытым вложены классом , то никакого настоящего ущерба от прямого доступа к его полям с дынными не будет.

Item 15  Предпочитайте постоянство
     
     1. Не создавайте каких-либо методов, которые модифицируют представлены объект .
     2. Убедитесь, что не один метод класса не может быть предопределен.
     3. Сделайте все поля final.
     4. Сделай все поля закрытыми.
     5. Убедитесь в монопольном доступе ко всем изменяемым компонентам.

    Неизменяемые объекты по своей сути безопасны при работе с потоками.

    Неизменяемые объекты образуют крупные строительные блоки для остальных объектов.
    Может возникнуть проблема с производительностью если объекты буду большими , можно сделать класс компаньон например String и StringBuffer.

Item 16  Предпочитайте компоновку наследованию
 
     В отличие от вызова метода наследование нарушает инкапсуляцию .
     Может поломался расширяемый класс после изменения супер класса .

     Действительно ли каждый В является А ?

     SELF problem - callback

Item 17  Конструкторы класса не должны вызывать предопределяемые методы

     Единственный способ протестировать класс , созданный для наследования - это написать подклассы .

Item 18 Предпочитайте интерфейсы абстрактным классам

     Интерфейс идеально подходит для создания дополнений

     Интерфейсы позволяют создавать структуры без иерархии

     Интерфейсы позволяют безопасно и мощно наращивать функциональность

     Хорошая идея объединять абстарктный класс с интерфейсов , делая скилет .

Item 19  Используйте интерфейсы только для определения типов

     Интерфейсы не надо использовать для констант

Item 20  Объединение заменяйте иерархией классов

     Вязаные классы разделять на иерархию классов

Item 21  Используйте объект функции для выполнения сравнений

     например на базе интерфейс Comparator создается  анонимный класс  с функцией , если используется редко иначе это должен быть сигелтон

Item 22   Предпочитайте статические классы-члены не статическим

     Если вы объявили класс-член, которому не нужен доступ к экземпляру содержащего его класса , не забудьте его поместить в соответствующую декларацию модификатор static  с тем , чтобы сделать этот класс статическим и он небыль связан с содержащим его классом .