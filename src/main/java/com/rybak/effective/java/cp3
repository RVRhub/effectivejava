Ср3 Methods Common to All Objects

Item 8: Obey the general contract when overriding equals

    - Theequalsmethod implements anequivalence relation.It is:
    - Reflexive:Foranynon-nullreferencevaluex,x.equals(x)mustreturntrue.
    - Symmetric:Foranynon-nullreferencevaluesxandy,x.equals(y)mustre- turntrueif and only ify.equals(x)returnstrue.
    - Transitive:Foranynon-nullreferencevaluesx,y,z,ifx.equals(y)returnstrueandy.equals(z)returnstrue, thenx.equals(z)must returntrue.
    - Consistent: For any non-null reference valuesxandy, multiple invocations ofx.equals(y)consistently returntrueor consistently returnfalse, pro- vided no information used inequalscomparisons on the objects is modified.
    - Foranynon-nullreferencevaluex,x.equals(null)mustreturnfalse.

     1. Use the == operator to check if the argument is a reference to this object.
     2. Use the instanceof operator to check if the argument has the correct type.
     3. Cast the argument to the correct type.
     4. For each “significant” field in the class, check if that field of the argument matches the corresponding field of this object.
     5. When you are finished writing your equals method, ask yourself three questions: Is it symmetric? Is it transitive? Is it consistent?

Item 9: Always override hashCode when you override equals

    - You must override hashCode in every class that overrides equals.
    - The key provision that is violated when you fail to override hashCode is the second one: equal objects must have equal hash codes.
     
     1. Store some constant nonzero value, say, 17, in an int variable called result.
     2. For each significant field f in your object (each field taken into account by the equals method, that is), do the following:
    
    - Do not be tempted to exclude significant parts of an object from the hash code computation to improve performance.

Item 11: Override clone judiciously
    x.clone() != x
    x.clone().getClass() == x.getClass()
    x.clone().equals(x)

    - if you override the clone method in a nonfinal class, you should return an object obtained by invoking super.clone.
    - In practice, a class that implements Cloneable is expected to provide a properly functioning public clone method.
    - In effect, the clone method functions as another constructor; you must ensure that it does no harm to the original object and that it properly establishes invariants on the clone.
    - the clone architecture is incompatible with normal use of final fields referring to mutable objects,