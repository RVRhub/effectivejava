Cp2. Creating and Destroying Objects

Consider static factory methods instead of constructors
static factory method - есть advantages and disadvantages:
 advantages:
    -  у них есть имена
    -  не нужно создавать объект при каждом вызове  (instance-controlled.)
    - могут возвращать объекты любого подтипа  ()

    -   if (universe.length <= 64)
            return new RegularEnumSet<E>(elementType, universe);
        else
            return new JumboEnumSet<E>(elementType, universe);

    a service interface - какие поставщики реализации
    provider registration API - который система использует для регистрации реализации, предоставляя клиентам доступ к ним
    service access API - Которые клиенты используют для получения экземпляра службы

    - уменьшают информативность создания параметризованных экземпляров типа. например Map<String, List<String>> m = HashMap.newInstance();

 disadvantages:
     - нельзя создать subclass для класса у которого конструктор private
     - по имени можно не всегда понять что это static factory основные нейминги :

    - • valueOf—Returns an instance that has, loosely speaking, the same value as its
	parameters. Such static factories are effectively type-conversion methods.
	• of—A concise alternative to valueOf, popularized by EnumSet (Item 32).
	• getInstance—Returns an instance that is described by the parameters but
	cannot be said to have the same value. In the case of a singleton, getInstance
	takes no parameters and returns the sole instance.
	• newInstance—Like getInstance, except that newInstance guarantees that
	each instance returned is distinct from all others.
	• getType—Like getInstance, but used when the factory method is in a different
	class. Type indicates the type of object returned by the factory method.
	• newType—Like newInstance, but used when the factory method is in a different
	class. Type indicates the type of object returned by the factory method2



Item 2: Consider a builder when faced with many constructor parameters

    - telescoping constructorpattern
    - JavaBeanspattern
    - Builderpattern - combi


Item 3: Enforce the singleton property with a private constructor or an enum type
      Методы создания сингелтона.

Item 4: Enforce noninstantiability with a private constructor

	// Noninstantiable utility class
	public class UtilityClass {
	    // Suppress default constructor for noninstantiability
	    private UtilityClass() {
	      throw new AssertionError();
	    }
	    ... // Remainder omitted
	}

Item 5: Avoid creating unnecessary objects


Item 6: Eliminate obsolete object references

    - Nulling out object references should be the exception rather than the norm.
    - Another common source of memory leaks is caches
    - A third common source of memory leaks is listeners and other callbacks.

Item 7: Avoid finalizers
     
     Just pro- vide an explicit termination method, and require clients of the class to invoke this method on each instance when it is no longer needed.